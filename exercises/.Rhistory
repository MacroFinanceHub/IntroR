install.packages("mombf")
library(mombf)
epord
eprod()
eprod
m <- c(0,3); S <- matrix(c(2,0,0,1),ncol=2)
eprod(m, S, power=2)
showMethods(eprod)
showMethods(mombf:::eprod)
showMethods(mombf)
getAnywhere(eprod)
getAnywhere(mombf:::eprod)
getAnywhere(mombf::eprod)
getAnywhere(mombf:eprod)
getAnywhere(mombf)
mvtexpect_vec
#Slide 18
?mean
help(mean)
help("for")
help("while")
?"while"
help(package = "prettyR")
methods(plot) #gives you overview of extra functions, e.g.
help(plot.lm)
help.start()
#Slide 20
1+1*10
(1+1)*10
(x<-12)
(x<-c(1,2,3,4))
(x<-c(1,2,3,4,NA))
mean(x, na.rm=FALSE)
mean(x, na.rm=FALSE)
mean(x, na.rm=TRUE)
{x<-2; y<-1
z<-x+y; z2<- z^2
z
z2}
x <- c(1, 2, 1, 2, 1, 2, 1, 2)
print(x)
mode(x)
class(x)
length(x)
dim(x)
x+x
2*x
x + 10
x + c(10, 100)
x <- as.matrix(x)
mode(x); class(x); length(x); dim(x)
2 -> x
c(2,"3") -> y
y
5<7
1+1 == 3
a <- c(-1,4,9)
a >= 2 & a < 8
b <- c(NA,1,2,3)
b>0
is.na(b)
a[a>2]
a == 4
a=4
#you will need to install packages only once
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
search()
detach("package:ggplot2")
search()
getwd()
#setwd(choose.dir()) # on windows
getwd()
a <- 3 * (4 + 9) / (8 - 12.5)
b <- c(1, 4, 1999, 2011)
d <- 2 * pi
e <- a + d
print(a); print(b); print(d); print(e)
# Because c() is the built-in concatenation command! Do not use c for variable or function declaration. This could mess up your code.
print("Because c() is the built-in concatenation command! Do not use c for variable or function declaration. This could mess up your code.")
rm(list = ls())
x <- c(-1, 0, 1, 4, 9, 2, 1, 4.5, 1.1, -0.9)
y <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, NA)
length(x); length(y); length(x) == length(y)
all(x + 3 >= 0)
all(y > 0)
all(y > 0, na.rm = TRUE)
any(y > 0)
rm(list = ls())
x <- c(-1, 0, 1, 4, 9, 2, 1, 4.5, 1.1, -0.9)
y <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, NA)
x + y
x * y
y / x
log(x)
length(log(x))
any(sqrt(x) >= 2)
a <- sum(x)
print(a)
b <- sum(y^2, na.rm = TRUE)
print(b)
sum(x * (y^2), na.rm = TRUE)
sum(x > 0)
x^y
x^(1/y)
log(exp(y))
y*c(-1,1)
x+c(-1,0,1)
sum(y*c(-1,1),na.rm=TRUE)
rm(list = ls())
X <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)
t(X)
dim(X)
det(X)
sum(diag(X))
diag(X) <- c(7, 8, 9)
eigen(X)
print("Yes, since all eigenvalues are positive.")
solve(X)  # inverts X
eigen(solve(X))
a <- c(1, 3, 2)
a * X
a %*% X
X %*% a
t(a) %*% X %*% a
I <- diag(3) #not good practice to use I
Y <- cbind(matrix(1:9,3,3),I)
Z <- rbind(matrix(1:9,3,3),I)
cbind(1,X)
rbind(Y,c(1,2,3))
X%*%I
dim(X%*%Y)
t(Y)+Z
solve(t(Z)%*%Z)%*%(t(Z)%*%Z)
rm(list = ls())
x <- c(-1, 0, 1, 4, 9, 2, 1, 4.5, 1.1, -0.9)
y <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, NA)
union(x, y)
length(x)
length(y)
length(union(x, y))
sum(unique(y) %in% x)
length(intersect(y,x))
length(unique(y))
z <- cumsum(x)
print(z)
which.max(x)
rm(list = ls())
x1 <- 1:9  # or c(1:9)
x2 <- rep(c(0, 1), times = 4)
x3 <- rep(1, times = 8)
x4 <- rep(c(-1, 1), times = 3)
x5 <- seq(from = 1980, to = 2010, by = 5)
x6 <- seq(0, 1, by = 0.01)
a <- c("a", "b", "c")
rep(a, 3)
rep(a, times = 3)
rep(a, each = 3)
seq(-pi, pi, length = 500)
1:10 + 1    # sequence from 2 to 11
1:(10 + 1)  # sequence from 1 to 11
rep("bla",10)
rep(rep(1:3,2),each=4)
rep(c(1,6,NA,2),times=c(2,2,5,3))
rm(list = ls())
x <- c(1, 1.1, 9, 8, 1, 4, 4, 1)
y <- c(1, 2, 3, 4, 4, 3, 2, NA)
z <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)
x[-2]
x[2:5]
x[c(1,5,8)]
x[-c(1,5,8)]
x[y]
x[seq(2,8,by=2)]
x[rep(1:3,4)]
y[z]
y[!z]
y[x>2]
y[x==1]
x[!is.na(y)]
y[!is.na(y)]
x2 <- x
x2[x2 == 4] <- -4
print(x2)
x2[x2 == 1] <- NA
print(x2)
x2[z] <- 0
print(x2)
rm(list = ls())
x <- matrix(c(1:12, 12:1), 4, 6)
x[1,3]
x[,5]
x[2,]
x[,-3]
x[-4,]
x[2:3,3:4]
x[2:4,4]
x[x>5]
x[,x[1,]<=5]
x[x[,2]>6,]
x[x[,2]>6,4:6]
x[x[,1]<3 & x[,2]<6,]
x[x[, 5]>= (3 * x[, 6]) , ]
length(x[x > 7])  # or: sum(x>7)
sum(x[2, ] < x[1, ])
sum(x[, 2:6] > x[, 1:5])  # alternativ: sum(x[,-1]>x[,-6])
sum(x[, 2:6] > x[, 1:5])
sum(x[,-1]>x[,-6])
rm(list = ls())
bsp1 <- read.csv2("data/bsp1.txt")  # German format (sep=';', dec=','), therefore read.csv2
print(bsp1)
head(bsp1)
tail(bsp1)
# international format (sep=',', dec='.'), therefore read.csv:
bsp2 <- read.csv("data/bsp2.txt")
# See help file for default settings
bsp3 <- read.table("data/bsp3.txt", dec = ".", sep = ",")
class(bsp2)
dim(bsp2)
names(bsp2)
summary(bsp3)
apply(bsp3, 2, sd)
apply(bsp3, 2, mean)
x <- 1:3
y <- 4:6
smalldataframe <- data.frame(x, y)
write.csv2(smalldataframe, file = "data/smalldataframe.csv")  # write.csv2 for German Excel
lest2001 <- read.table("data/lest2001.csv", header = TRUE, na.strings= ".", dec = ".", sep = ";")
head(lest2001)
y <- lest2001$zve
range(y, na.rm = TRUE)
median(y, na.rm = TRUE)
var(y, na.rm = TRUE)
quantile(y, p = c(0.01, 0.99), na.rm = TRUE)
pools <- read.csv("data/swimming_pools.csv", stringsAsFactors = FALSE)
str(pools)# Check the structure of pools
hotdogs <- read.delim("data/hotdogs.txt", header = FALSE)
summary(hotdogs) # Summarize hotdogs
hotdogs <- read.delim("data/hotdogs.txt", header = FALSE, col.names = c("type", "calories", "sodium"))
str(hotdogs)
# Edit the colClasses argument to import the data correctly: hotdogs2
hotdogs2 <- read.delim("data/hotdogs.txt", header = FALSE,
col.names = c("type", "calories", "sodium"),
colClasses = c("factor", "NULL", "numeric"))
str(hotdogs2)
rm(list = ls())
library(readr)
#You can simply use RStudio GUI for data import :-)
rm(list = ls())
library(readxl)
#Use RStudio GUI for data import :-)
excel_sheets("data/urbanpop.xlsx")
pop_1 <- read_excel("data/urbanpop.xlsx", sheet = 1)
pop_2 <- read_excel("data/urbanpop.xlsx", sheet = 2)
pop_3 <- read_excel("data/urbanpop.xlsx", sheet = 3)
pop_list <- list(pop_1, pop_2, pop_3)
pop_list
rm(list = ls())
library("haven")
sugar <- read_dta("data/trade.dta")
str(sugar) # Structure of sugar
sugar$Date <- as.Date(as_factor(sugar$Date))
str(sugar)
rm(list = ls())
library(foreign)
florida <- read.dta("data/florida.dta")
tail(florida)
edu_equal_1 <- read.dta("data/edequality.dta")
str(edu_equal_1)
edu_equal_2 <- read.dta("data/edequality.dta", convert.factors = FALSE)
str(edu_equal_2)
edu_equal_3 <- read.dta("data/edequality.dta", convert.underscore = TRUE)
str(edu_equal_3)
rm(list = ls())
bsp2 <- read.csv("data/bsp2.txt",as.is=TRUE)
print(bsp2)
bsp2[, 2]
bsp2$Y
bsp2[[2]]
bsp2["Y"]
bsp2[, 4]
bsp2$U
bsp2[[4]]
bsp2["U"]
bsp2[, 5]
bsp2$V
bsp2[[5]]
bsp2["V"]
attach(bsp2)
print(X)  # For safety reasons apply rm(list = ls()) upfront
detach(bsp2)
attach(bsp2)
attach(bsp2)
print(X)  # For safety reasons apply rm(list = ls()) upfront
detach(bsp2)
detach(bsp2)
attach(bsp2)
print(X)  # For safety reasons apply rm(list = ls()) upfront
detach(bsp2)
bsp2[bsp2$U == "A" | bsp2$U == "B", ]
bsp2[bsp2$X < median(bsp2$X) & bsp2$Y > median(bsp2$Y), ]
row.names(bsp2) <- paste(rep(LETTERS[1:20], each = 2), rep(1:2, 20), sep = "")
print(bsp2)
bsp2["T1", "Z"]
rm(list = ls())
library("dplyr")
library("gapminder")
gapminder
gapminder %>%
filter(year == 2007)
gapminder %>%
filter(year == 2007, country == "United States")
gapminder %>%
arrange(gdpPercap)
gapminder %>%
filter(year == 2007) %>%
arrange(desc(gdpPercap))
gapminder %>%
mutate(pop = pop/1000000)   #change variable
gapminder %>%
mutate(gdp = gdpPercap*pop) #add new variable total gdp
gapminder %>%
mutate(gdp = gdpPercap*pop) %>%
filter(year == 2007) %>%
arrange(desc(gdp))
gapminder %>%
filter(year==2007) %>%
summarize(meanLifeExp = mean(lifeExp), medianLifeExp = median(lifeExp), totalPop = sum(as.numeric(pop)))
gapminder %>%
group_by(year) %>%
summarize(meanLifeExp = mean(lifeExp), medianLifeExp = median(lifeExp), totalPop = sum(as.numeric(pop)))
gapminder %>%
filter(year==2007) %>%
group_by(continent) %>%
summarize(meanLifeExp = mean(lifeExp), medianLifeExp = median(lifeExp), totalPop = sum(as.numeric(pop)))
gapminder %>%
group_by(year,continent) %>%
summarize(meanLifeExp = mean(lifeExp), medianLifeExp = median(lifeExp), totalPop = sum(as.numeric(pop)))
rm(list = ls())
library("dplyr")
library("ggplot2")
library("gapminder")
gapminder_2007 <- gapminder %>%
filter(year == 2007)
gapminder_2007 <- gapminder %>%
filter(year == 2007)
plot(gapminder_2007$gdpPercap,gapminder_2007$lifeExp)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
scale_x_log10() # each unit on the x-axis represents a change of 10 times the gdp
ggplot(gapminder_2007, aes(x = pop, y = gdpPercap)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10()
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ year)
by_year <- gapminder %>%
group_by(year) %>%
summarize(meanLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(by_year, aes(x = year, y = totalPop)) +
geom_point() +
expand_limits(y=0) # start y axis at 0
by_year_continent <- gapminder %>%
group_by(year,continent) %>%
summarize(meanLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(by_year_continent, aes(x = year, y = meanLifeExp, color = continent)) +
geom_point() +
expand_limits(y=0) # start y axis at 0
ggplot(by_year_continent, aes(x = year, y = meanLifeExp, color = continent)) +
geom_line() +
expand_limits(y=0) # start y axis at 0
by_continent <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(meanLifeExp = mean(lifeExp))
#x is categorial variable
ggplot(by_continent, aes(x = continent, y = meanLifeExp, color = continent)) +
geom_col()
gapminder_2007 <- gapminder %>%
filter(year == 2007)
ggplot(gapminder_2007, aes(x = pop)) +
geom_histogram() +
scale_x_log10()
gapminder_2007 <- gapminder %>%
filter(year == 2007)
ggplot(gapminder_2007, aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
scale_y_log10() +
ggtitle("Comparing GDP per capita across continents (log-scale)")
x1 <-c(1,2,3); x2 <-c(5,6,7); x3 <-c(8,9,0);
mean(x1,x2,x3) #nope!
summary(data.frame(x1,x2,x3)) #better!
mean(na.rm=FALSE,trim=.1,x=mydata)
mean(na.rm=FALSE,trim=.1,x=x1)
mean(x1,.1,FALSE)
degree <- c(0, 2, 1, 2, 3, 2, 1, 3)
gender <- c(”f”, ”f”, ”f”, NA, ”m”, ”m”, ”m”, ”m”)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
degree[gender=="f""]
degree[gender=="m""]
degree[gender=="f"]
degree[gender=="m"]
table(degree)
table(gender)
summary(gender)
summary(degree)
summary(degree[gender==”m”])
summary(degree[gender=="m"])
degree <- factor(degree)
degree
summary(degree)
degree <- factor(degree,
levels=c(1,2,3,4),
labels = c(”BA”,”MA”,”PhD”,”Other”))
degree <- factor(degree,
levels=c(1,2,3,4),
labels = c("BA","MA","PhD","Other"))
degree
summary(degree)
summary(degree)
gender <- factor(gender,
levels = c("m","f"),
labels = c("Male","Female"))
summary(gender)
degree[gender=="Female"]
degree[gender=="f"] #note this does not work anymore!
testscores <- c("1.7", "1.3", "1.0", "1.7", "2.0")
mydata <- data.frame(degree, gender, testscores)
testscores <- c("1.7", "1.3", "1.0", "1.7", "2.0", NA, NA, NA)
mydata <- data.frame(degree, gender, testscores)
mydata
names(mydata)
rownames(mydata)
rownames(mydata) <- c("Bart","Homer","Maggie","Marge","Nelson","Apu","Moe","Krusty")
rownames(mydata)
mydata
class(mydata$testscores)
str(mydata$testscores)
as.character(mydata$testscores)
as.numeric(mydata$testscores)
as.numeric(as.character(mydata$testscores))
mydata$testscores <- as.numeric(as.character(mydata$testscores))
class(mydata$testscores)
class(mydata$testscores)
data(Titanic)
detach(”package:dplyr”)
detach("package:dplyr")
print(data.frame(Titanic))
plot(data.frame(Titanic))
library(dplyr)
print(tbl_df(Titanic))
plot(Titanic)
